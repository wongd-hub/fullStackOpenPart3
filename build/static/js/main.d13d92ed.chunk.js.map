{"version":3,"sources":["services/persons.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","Filter","props","value","filter","onChange","changeFilterHandler","AddNewPerson","onSubmit","submitHandler","newName","changeHandler","newNumber","changeNumberHandler","type","Message","message","style","App","useState","name","number","persons","setPersons","setNewName","setNewNumber","setFilter","setMessage","useEffect","personService","personsToShow","per","toLowerCase","includes","event","target","preventDefault","userConfirm","undefined","map","el","length","window","confirm","border","color","marginBottom","setTimeout","catch","error","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d13d92ed.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then(response => response.data);\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data);\n}\n\nconst handleDelete = (id) => {\n    return (\n        axios\n            .delete(`${baseUrl}/${id}`)\n    )\n}\n\nexport default {\n    getAll,\n    create,\n    update,\n    handleDelete\n}","import React, { useState, useEffect } from 'react';\nimport personService from './services/persons';\n\nconst Filter = (props) => <form>filter shown with: <input value={props.filter} onChange={props.changeFilterHandler} /></form>\n\nconst AddNewPerson = (props) => {\n  return (\n    <form onSubmit={props.submitHandler}>\n      <h2>Add a new contact</h2>\n      <div>\n        name: <input value={props.newName} onChange={props.changeHandler} />\n        <br />\n        number: <input value={props.newNumber} onChange={props.changeNumberHandler} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Message = ({ message, style }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div style={style}>\n      <p>{message}</p>\n    </div> \n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([{ name: 'Arto Hellas', number: '040-1234567' }]) \n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [message, setMessage] = useState({\n    message: null,\n    style: null\n  });\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response)\n      })\n  }, [])\n\n  // Handler for name change\n  const changeHandler = (event) => setNewName(event.target.value)\n\n  // Handler for number change\n  const changeNumberHandler = (event) => setNewNumber(event.target.value)\n\n  // Handler for filter change\n  const changeFilterHandler = (event) => setFilter(event.target.value)\n\n  // Handle form submission\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    let userConfirm = undefined;\n\n    if (persons.map(per => per.name).filter(el => el.toLowerCase() === newName.toLowerCase()).length > 0) {\n      userConfirm = window.confirm(`${newName} is already in the phonebook, replace the old number with a new one?`);\n\n      if (!userConfirm) {\n        \n        // Clear fields\n        setNewName('');\n        setNewNumber('');\n\n        return null;\n\n      }\n    }\n\n    // Post the person to the server and update the app's state\n    personService\n      .create({\n        name: newName,\n        number: newNumber\n      })\n      .then(response => {\n\n        if (userConfirm) {\n\n          setPersons(persons.map(per => per.name.toLowerCase() !== newName.toLowerCase() ? per : response))\n\n        } else {\n\n          setPersons([\n            ...persons,\n            response\n          ])\n\n        }\n\n      })\n      .then(response => {\n        setMessage({\n          message: `Added successfully`,\n          style: {\n            border: '3px solid green',\n            color: 'green',\n            marginBottom: '30px'\n          }\n        })\n\n        setTimeout(() => {\n          setMessage({\n            message: null,\n            style: null\n          })\n        }, 5000)\n      })\n      .catch(error => {\n        setMessage({\n          message: `Unsuccessful in adding`,\n          style: {\n            border: '3px solid red',\n            color: 'red',\n            marginBottom: '30px'\n          }\n        })\n\n        setTimeout(() => {\n          setMessage({\n            message: null,\n            style: null\n          })\n        }, 5000)\n      })\n\n    // Clear fields\n    setNewName('');\n    setNewNumber('');\n\n  }\n\n  const fullDeleteHandle = (id) => {\n    const userConfirm = window.confirm(`Do you really want to delete person ${id}?`);\n\n    if (userConfirm) {\n      personService\n      .handleDelete(id)\n      .then(() => {\n        // Re-GET persons to refresh the app\n        personService\n        .getAll()\n        .then(response => {\n          setPersons(response)\n        })\n      })\n      .then(response => {\n        setMessage({\n          message: `Deleted successfully`,\n          style: {\n            border: '3px solid green',\n            color: 'green',\n            marginBottom: '30px'\n          }\n        })\n\n        setTimeout(() => {\n          setMessage({\n            message: null,\n            style: null\n          })\n        }, 5000)\n      })\n      .catch(error => {\n        setMessage({\n          message: `Unsuccessful in deleting`,\n          style: {\n            border: '3px solid red',\n            color: 'red',\n            marginBottom: '30px'\n          }\n        })\n\n        setTimeout(() => {\n          setMessage({\n            message: null,\n            style: null\n          })\n        }, 5000)\n      });\n    } else {\n      return\n    }\n  }\n\n  let personsToShow = []; \n  if (filter === '') {\n    personsToShow = persons;\n  } else {\n    personsToShow = persons\n      .filter((per) => per.name\n                        .toLowerCase()\n                        .includes(filter.toLowerCase()))\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Message message={message.message} style={message.style} />\n      <Filter filter={filter} changeFilterHandler={changeFilterHandler} />\n      <AddNewPerson submitHandler={submitHandler} newName={newName} changeHandler={changeHandler} newNumber={newNumber} changeNumberHandler={changeNumberHandler} />\n      <h2>Numbers</h2>\n      {\n        personsToShow\n          .map((per) => <p key={per.name + per.number}>{per.name} {per.number} <button onClick={() => fullDeleteHandle(per.id)}>Delete</button></p>)\n      }\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}